////
/// @group mq
////

/// @type map
/// @require {function} px2em
///
/// @example scss - Use with px
///   $breakpoints: (
///    'xs': 360px,
///    'sm': 576px
///   ) !default;
///
/// @example scss - Use with Em
///   $breakpoints: (
///    'xs': px2em(360),
///    'sm': px2em(576)
///   ) !default;
///
/// @example scss - Mixed use
///   $breakpoints: (
///    'xs': 360px,
///    'sm': px2em(576)
///   ) !default;
///
$breakpoints: (
  xs: px2em(360px),
  sm: px2em(576px),
  md: px2em(768px),
  lg: px2em(992px),
  xl: px2em(1200px),
  ul: px2em(1400px),
) !default;

/// Gets the media value from '$breakpoints'
///
/// @param {string} $value - Value to be taken
/// @require {variable} $breakpoints - Media sizes
/// @return {number} - Media value
/// @throw `$value` does not exist in `$breakpoints`
///
/// @access private
///
/// @example
///   @debug get-breakpoint(xl);
///     //-> 75em
///
@function get-breakpoint($value) {
  @if map-has-key($breakpoints, $value) {
    @return map-get($breakpoints, $value);
  } @else {
    @error $value + " does not exist in `$breakpoints`";
  }
}

/// The superpower of css @media queries.
///
/// @param {number} $until [null] - Entered max-width value
/// @param {number} $from [null] - Entered min-width value
/// @param {number} $max-width [null] - Assigned max-width value
/// @param {number} $min-width [null] - Assigned min-width value
/// @param {string} $media-query - Media query
///
/// @require {function} get-breakpoint - To pull the media value
/// @require {variable} $breakpoints - Media Sizes
///
/// @output {string} - Media query
///
/// @example scss - Simple operation
///   .foo {
///     @include mq(xl) {
///       color: white;
///     }
///   }
///   @media screen and (max-width: 75em) { .foo { color: white; }
///
/// @example scss - Usage with custom value
///   .foo {
///     @include mq(1400px) {
///       color: white;
///     }
///   }
///   @media screen and (max-width: 1400px) { .foo { color: white; }
///
/// @example scss - Usage with unitless value
///   .foo {
///     @include mq(1400) {
///       color: white;
///     }
///   }
///   @media screen and (max-width: 1400px) { .foo { color: white; }
///
/// @example scss - Usage with px2em function
///   .foo {
///     @include mq(px2em(1400px)) {
///       color: white;
///     }
///   }
///   @media screen and (max-width: 87.5em) { .foo { color: white; }
///
/// @example scss - Creating a min-width query
///   .foo {
///     @include min-mq(xl) {
///       color: white;
///     }
///   }
///   @media screen and (min-width: 75em) { .foo { color: white; }
///
/// @example scss - Creating a min-width query
///   .foo {
///     @include mq($from: xl) {
///       color: white;
///     }
///   }
///   @media screen and (min-width: 75em) { .foo { color: white; }
///
/// @example scss - Creating a max-width query
///   .foo {
///     @include max-mq(xl) {
///       color: white;
///     }
///   }
///   @media screen and (max-width: 75em) { .foo { color: white; }
///
/// @example scss - Range determination
///   .foo {
///     $until: ul;
///     $from: xl;
///     @include mq($until, $from) {
///       color: white;
///     }
///   }
///   @media screen and (min-width: 75em) and (max-width: 87.5em) { .foo { color: white; }
///
/// @example scss - Range determination
///   .foo {
///     @include mq($from: xl, $until: ul) {
///       color: white;
///     }
///   }
///   @media screen and (min-width: 75em) and (max-width: 87.5em) { .foo { color: white; }
///
/// @example scss - Range determination
///   .foo{
///     $until: ul;
///     $from: xl;
///     @include range-mq($from, $until){
///       color: white;
///     }
///   }
///   @media screen and (min-width: 75em) and (max-width: 87.5em) { .foo { color: white; }
///
@mixin mq($until: null, $from: null) {
  $max-width: null;
  $min-width: null;
  $media-query: '';

  @if $until {
    @if type-of($until) == number {
      @if unitless($until) {
        $max-width: $until + 'px';
      } @else {
        $max-width: $until;
      }
    } @else {
      $max-width: #{get-breakpoint($until)};
    }
  }

  @if $from {
    @if type-of($from) == number {
      @if unitless($from) {
        $min-width: $from + 'px';
      } @else {
        $min-width: $from;
      }
    } @else {
      $min-width: #{get-breakpoint($from)};
    }
  }

  @if $max-width and $min-width {
    $media-query: '(min-width: #{$min-width}) and (max-width: #{$max-width})';
  } @else if $max-width {
    $media-query: '(max-width: #{$max-width})';
  } @else if $min-width {
    $media-query: '(min-width: #{$min-width})';
  }

  @media screen and #{$media-query} {
    @content;
  }
}

// Shortcuts

/// Minimum media and query to run on.
///
/// @alias mq
///
/// @param {string | number} $value - Entered min-width value
/// @require {mixin} mq - Media query
///
@mixin min-mq($value) {
  @include mq(null, $value) {
    @content;
  }
}

/// Maximum media and query to run on.
/// It is very similar to the default use of the 'media' mixin,
/// but offers a more practical use.
///
/// @alias mq
///
/// @param {string | number} $value - Entered max-width value
/// @require {mixin} mq - Media query
///
@mixin max-mq($value) {
  @include mq($value) {
    @content;
  }
}

/// Query to run between or outside of 2 points.
/// It is very similar to the interval usage of the `media` mixin,
/// but of course it offers an easier and more understandable use
/// and is the recommended usage.
///
/// @alias mq
///
/// @param {string | number} $until - Entered max-width value
/// @param {string | number} $from - Entered min-width value
/// @require {mixin} mq - Media query
///
@mixin range-mq($from, $until) {
  @include mq($until, $from) {
    @content;
  }
}

/// @type boolen
$show-breakpoints: false !default;

@if $show-breakpoints {
  body::after {
    position: fixed;
    z-index: 99;
    right: 0;
    top: 0;
    padding: 0.5rem 1rem;
    background-color: $white-3;
    border: 1px solid $black;

    $breakpoints: $breakpoints;

    @each $breakpoint, $breakpoint-value in $boyutlar {
      $element: $breakpoint;
      $content: '#{$breakpoint}';

      @if $breakpoint-value {
        $element: $breakpoint-value;
        $content: '#{$breakpoint}: >= #{$element}';
      }

      @include min-mq($element) {
        content: '#{$content}';
      }
    }
  }
}
